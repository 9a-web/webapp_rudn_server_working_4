"""
–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –†–£–î–ù
"""

from datetime import datetime
from typing import List, Optional
from models import Achievement, UserAchievement, UserStats, NewAchievementsResponse
import uuid

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = [
    {
        "id": "first_group",
        "name": "–ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü",
        "description": "–í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã",
        "emoji": "üéØ",
        "points": 10,
        "type": "first_group",
        "requirement": 1
    },
    {
        "id": "group_explorer",
        "name": "–®–ø–∏–æ–Ω",
        "description": "–ü—Ä–æ—Å–º–æ—Ç—Ä 3+ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø",
        "emoji": "üïµÔ∏è",
        "points": 15,
        "type": "group_explorer",
        "requirement": 3
    },
    {
        "id": "social_butterfly",
        "name": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞",
        "description": "5+ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π",
        "emoji": "ü¶ã",
        "points": 20,
        "type": "social_butterfly",
        "requirement": 5
    },
    {
        "id": "schedule_gourmet",
        "name": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–π –≥—É—Ä–º–∞–Ω",
        "description": "50+ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
        "emoji": "üçï",
        "points": 25,
        "type": "schedule_gourmet",
        "requirement": 50
    },
    {
        "id": "night_owl",
        "name": "–ù–æ—á–Ω–æ–π —Å–æ–≤—ë–Ω–æ–∫",
        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ 00:00",
        "emoji": "ü¶â",
        "points": 10,
        "type": "night_owl",
        "requirement": 1
    },
    {
        "id": "early_bird",
        "name": "–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞",
        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ 08:00",
        "emoji": "üåÖ",
        "points": 10,
        "type": "early_bird",
        "requirement": 1
    },
    # –ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    {
        "id": "analyst",
        "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "description": "–û—Ç–∫—Ä—ã–ª —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
        "emoji": "üìà",
        "points": 10,
        "type": "analyst",
        "requirement": 1
    },
    {
        "id": "chart_lover",
        "name": "–õ—é–±–∏—Ç–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–æ–≤",
        "description": "–ü—Ä–æ–≤–µ—Ä–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 5 —Ä–∞–∑",
        "emoji": "üìä",
        "points": 15,
        "type": "chart_lover",
        "requirement": 5
    },
    {
        "id": "organizer",
        "name": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
        "emoji": "üìÖ",
        "points": 10,
        "type": "organizer",
        "requirement": 1
    },
    {
        "id": "settings_master",
        "name": "–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫",
        "description": "–ù–∞—Å—Ç—Ä–æ–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        "emoji": "‚öôÔ∏è",
        "points": 10,
        "type": "settings_master",
        "requirement": 1
    },
    {
        "id": "knowledge_sharer",
        "name": "–î–µ–ª–∏—à—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏",
        "description": "–ü–æ–¥–µ–ª–∏–ª—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º",
        "emoji": "üîó",
        "points": 15,
        "type": "knowledge_sharer",
        "requirement": 1
    },
    {
        "id": "ambassador",
        "name": "–ê–º–±–∞—Å—Å–∞–¥–æ—Ä",
        "description": "–ü–æ–¥–µ–ª–∏–ª—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º 5 —Ä–∞–∑",
        "emoji": "üé§",
        "points": 25,
        "type": "ambassador",
        "requirement": 5
    },
    {
        "id": "explorer",
        "name": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
        "description": "–û—Ç–∫—Ä—ã–ª –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –º–µ–Ω—é",
        "emoji": "üîé",
        "points": 20,
        "type": "explorer",
        "requirement": 4  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ö–∞–ª–µ–Ω–¥–∞—Ä—å
    },
    {
        "id": "first_week",
        "name": "–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è",
        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
        "emoji": "üìÜ",
        "points": 30,
        "type": "first_week",
        "requirement": 7
    },
    {
        "id": "perfectionist",
        "name": "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç",
        "description": "–ü–æ–ª—É—á–∏–ª –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
        "emoji": "‚ú®",
        "points": 50,
        "type": "perfectionist",
        "requirement": 14  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (15 - 1)
    }
]


def get_all_achievements() -> List[Achievement]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    return [Achievement(**achievement) for achievement in ACHIEVEMENTS]


def get_achievement_by_id(achievement_id: str) -> Optional[Achievement]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ ID"""
    for achievement in ACHIEVEMENTS:
        if achievement["id"] == achievement_id:
            return Achievement(**achievement)
    return None


async def check_and_award_achievements(db, telegram_id: int, stats: UserStats) -> NewAchievementsResponse:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–¥–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    """
    new_achievements = []
    total_points = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    existing_achievements = await db.user_achievements.find(
        {"telegram_id": telegram_id}
    ).to_list(100)
    existing_ids = [ach["achievement_id"] for ach in existing_achievements]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for achievement_data in ACHIEVEMENTS:
        achievement_id = achievement_data["id"]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        if achievement_id in existing_ids:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        earned = False
        
        if achievement_id == "first_group" and stats.first_group_selected:
            earned = True
        elif achievement_id == "group_explorer" and len(stats.unique_groups) >= 3:
            earned = True
        elif achievement_id == "social_butterfly" and stats.friends_invited >= 5:
            earned = True
        elif achievement_id == "schedule_gourmet" and stats.schedule_views >= 50:
            earned = True
        elif achievement_id == "night_owl" and stats.night_usage_count >= 1:
            earned = True
        elif achievement_id == "early_bird" and stats.early_usage_count >= 1:
            earned = True
        
        # –ï—Å–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º
        if earned:
            achievement = Achievement(**achievement_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            user_achievement = UserAchievement(
                telegram_id=telegram_id,
                achievement_id=achievement_id,
                earned_at=datetime.utcnow(),
                seen=False
            )
            
            await db.user_achievements.insert_one(user_achievement.dict())
            
            new_achievements.append(achievement)
            total_points += achievement.points
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if total_points > 0:
        await db.user_stats.update_one(
            {"telegram_id": telegram_id},
            {
                "$inc": {
                    "total_points": total_points,
                    "achievements_count": len(new_achievements)
                },
                "$set": {"updated_at": datetime.utcnow()}
            }
        )
    
    return NewAchievementsResponse(
        new_achievements=new_achievements,
        total_points_earned=total_points
    )


async def get_or_create_user_stats(db, telegram_id: int) -> UserStats:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    stats_data = await db.user_stats.find_one({"telegram_id": telegram_id})
    
    if not stats_data:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = UserStats(telegram_id=telegram_id)
        await db.user_stats.insert_one(stats.dict())
        return stats
    
    return UserStats(**stats_data)


async def track_user_action(db, telegram_id: int, action_type: str, metadata: dict = None) -> NewAchievementsResponse:
    """
    –û—Ç—Å–ª–µ–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    """
    if metadata is None:
        metadata = {}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_or_create_user_stats(db, telegram_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    update_data = {"$set": {"updated_at": datetime.utcnow()}}
    
    if action_type == "select_group":
        if not stats.first_group_selected:
            update_data["$set"]["first_group_selected"] = True
    
    elif action_type == "view_group":
        group_id = metadata.get("group_id")
        if group_id and group_id not in stats.unique_groups:
            update_data["$push"] = {"unique_groups": group_id}
            update_data["$inc"] = {"groups_viewed": 1}
    
    elif action_type == "invite_friend":
        update_data["$inc"] = {"friends_invited": 1}
    
    elif action_type == "view_schedule":
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ metadata
        # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 1 –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        classes_count = metadata.get("classes_count", 1)
        update_data["$inc"] = {"schedule_views": classes_count}
    
    elif action_type == "night_usage":
        update_data["$inc"] = {"night_usage_count": 1}
    
    elif action_type == "early_usage":
        update_data["$inc"] = {"early_usage_count": 1}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
    await db.user_stats.update_one(
        {"telegram_id": telegram_id},
        update_data
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updated_stats = await get_or_create_user_stats(db, telegram_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    new_achievements_response = await check_and_award_achievements(db, telegram_id, updated_stats)
    
    return new_achievements_response


async def get_user_achievements(db, telegram_id: int) -> List[dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_achievements = await db.user_achievements.find(
        {"telegram_id": telegram_id}
    ).to_list(100)
    
    result = []
    for user_ach in user_achievements:
        achievement = get_achievement_by_id(user_ach["achievement_id"])
        if achievement:
            result.append({
                "achievement": achievement.dict(),
                "earned_at": user_ach["earned_at"],
                "seen": user_ach.get("seen", False)
            })
    
    return result


async def mark_achievements_as_seen(db, telegram_id: int) -> bool:
    """–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"""
    result = await db.user_achievements.update_many(
        {"telegram_id": telegram_id, "seen": False},
        {"$set": {"seen": True}}
    )
    return result.modified_count > 0
