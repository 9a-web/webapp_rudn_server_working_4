"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ wttr.in API
"""

import aiohttp
import logging
from typing import Optional
from models import WeatherResponse

logger = logging.getLogger(__name__)

WEATHER_API_URL = "http://wttr.in/Moscow?format=j1"

# –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –ø–æ–≥–æ–¥—ã wttr.in –Ω–∞ –∏–∫–æ–Ω–∫–∏
WEATHER_ICON_MAP = {
    "113": "‚òÄÔ∏è",  # Clear/Sunny
    "116": "‚õÖ",  # Partly cloudy
    "119": "‚òÅÔ∏è",  # Cloudy
    "122": "‚òÅÔ∏è",  # Overcast
    "143": "üå´Ô∏è",  # Mist
    "176": "üå¶Ô∏è",  # Patchy rain possible
    "179": "üå®Ô∏è",  # Patchy snow possible
    "182": "üåßÔ∏è",  # Patchy sleet possible
    "185": "üåßÔ∏è",  # Patchy freezing drizzle possible
    "200": "‚õàÔ∏è",  # Thundery outbreaks possible
    "227": "üå®Ô∏è",  # Blowing snow
    "230": "‚ùÑÔ∏è",  # Blizzard
    "248": "üå´Ô∏è",  # Fog
    "260": "üå´Ô∏è",  # Freezing fog
    "263": "üå¶Ô∏è",  # Patchy light drizzle
    "266": "üåßÔ∏è",  # Light drizzle
    "281": "üåßÔ∏è",  # Freezing drizzle
    "284": "üåßÔ∏è",  # Heavy freezing drizzle
    "293": "üå¶Ô∏è",  # Patchy light rain
    "296": "üåßÔ∏è",  # Light rain
    "299": "üåßÔ∏è",  # Moderate rain at times
    "302": "üåßÔ∏è",  # Moderate rain
    "305": "üåßÔ∏è",  # Heavy rain at times
    "308": "üåßÔ∏è",  # Heavy rain
    "311": "üåßÔ∏è",  # Light freezing rain
    "314": "üåßÔ∏è",  # Moderate or heavy freezing rain
    "317": "üå®Ô∏è",  # Light sleet
    "320": "üå®Ô∏è",  # Moderate or heavy sleet
    "323": "üå®Ô∏è",  # Patchy light snow
    "326": "‚ùÑÔ∏è",  # Light snow
    "329": "‚ùÑÔ∏è",  # Patchy moderate snow
    "332": "‚ùÑÔ∏è",  # Moderate snow
    "335": "‚ùÑÔ∏è",  # Patchy heavy snow
    "338": "‚ùÑÔ∏è",  # Heavy snow
    "350": "üåßÔ∏è",  # Ice pellets
    "353": "üå¶Ô∏è",  # Light rain shower
    "356": "üåßÔ∏è",  # Moderate or heavy rain shower
    "359": "üåßÔ∏è",  # Torrential rain shower
    "362": "üå®Ô∏è",  # Light sleet showers
    "365": "üå®Ô∏è",  # Moderate or heavy sleet showers
    "368": "üå®Ô∏è",  # Light snow showers
    "371": "‚ùÑÔ∏è",  # Moderate or heavy snow showers
    "374": "üåßÔ∏è",  # Light showers of ice pellets
    "377": "üåßÔ∏è",  # Moderate or heavy showers of ice pellets
    "386": "‚õàÔ∏è",  # Patchy light rain with thunder
    "389": "‚õàÔ∏è",  # Moderate or heavy rain with thunder
    "392": "‚õàÔ∏è",  # Patchy light snow with thunder
    "395": "‚õàÔ∏è",  # Moderate or heavy snow with thunder
}


def get_weather_icon(weather_code: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–¥—É"""
    return WEATHER_ICON_MAP.get(weather_code, "üå°Ô∏è")


async def get_moscow_weather() -> Optional[WeatherResponse]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ —á–µ—Ä–µ–∑ wttr.in API
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(WEATHER_API_URL, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status != 200:
                    logger.error(f"Weather API returned status {response.status}")
                    return None
                
                data = await response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                current = data.get("current_condition", [{}])[0]
                
                temperature = int(current.get("temp_C", 0))
                feels_like = int(current.get("FeelsLikeC", 0))
                humidity = int(current.get("humidity", 0))
                wind_speed = int(current.get("windspeedKmph", 0))
                weather_code = current.get("weatherCode", "113")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–∑ lang_ru –µ—Å–ª–∏ –µ—Å—Ç—å)
                weather_desc = current.get("lang_ru", [{}])
                if weather_desc and len(weather_desc) > 0:
                    description = weather_desc[0].get("value", "–Ø—Å–Ω–æ")
                else:
                    description = current.get("weatherDesc", [{}])[0].get("value", "Clear")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É
                icon = get_weather_icon(weather_code)
                
                return WeatherResponse(
                    temperature=temperature,
                    feels_like=feels_like,
                    humidity=humidity,
                    wind_speed=wind_speed,
                    description=description,
                    icon=icon
                )
    
    except aiohttp.ClientError as e:
        logger.error(f"Network error fetching weather: {e}")
        return None
    except Exception as e:
        logger.error(f"Error fetching weather: {e}")
        return None
