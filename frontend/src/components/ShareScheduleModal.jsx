import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Share2, Copy, Check, MessageCircle, Image as ImageIcon, X } from 'lucide-react';
import { botAPI } from '../services/api';
import { achievementsAPI } from '../services/api';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export const ShareScheduleModal = ({ 
  isOpen, 
  onClose, 
  schedule, 
  selectedDate,
  groupName,
  hapticFeedback,
  telegramId
}) => {
  const [copied, setCopied] = useState(false);
  const [botUsername, setBotUsername] = useState('rudn_pro_bot');
  const [webAppUrl, setWebAppUrl] = useState('');

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const fetchBotInfo = async () => {
      try {
        const botInfo = await botAPI.getBotInfo();
        if (botInfo && botInfo.username) {
          setBotUsername(botInfo.username);
        }
      } catch (error) {
        console.error('Failed to fetch bot info:', error);
      }
    };

    fetchBotInfo();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL WebApp
    if (window.Telegram?.WebApp?.initDataUnsafe?.start_param) {
      // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram WebApp
      setWebAppUrl(`https://t.me/${botUsername}`);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π URL
      setWebAppUrl(window.location.origin);
    }
  }, [botUsername]);

  if (!isOpen) return null;

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (date) => {
    return date.toLocaleDateString('ru-RU', { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long' 
    });
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const generateScheduleText = () => {
    const dateStr = formatDate(selectedDate);
    const dayName = selectedDate.toLocaleDateString('ru-RU', { weekday: 'long' });
    const formattedDayName = dayName.charAt(0).toUpperCase() + dayName.slice(1);
    
    const todaySchedule = schedule.filter(item => item.day === formattedDayName);

    if (todaySchedule.length === 0) {
      return `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}\n${groupName ? `–ì—Ä—É–ø–ø–∞: ${groupName}\n` : ''}\n‚ú® –ü–∞—Ä –Ω–µ—Ç! –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å! üéâ`;
    }

    let text = `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}\n`;
    if (groupName) {
      text += `üë• –ì—Ä—É–ø–ø–∞: ${groupName}\n`;
    }
    text += `\n`;

    todaySchedule.forEach((classItem, index) => {
      text += `${index + 1}. ${classItem.discipline}\n`;
      text += `   ‚è∞ ${classItem.time}\n`;
      if (classItem.auditory) {
        text += `   üìç ${classItem.auditory}\n`;
      }
      if (classItem.teacher) {
        text += `   üë®‚Äçüè´ ${classItem.teacher}\n`;
      }
      text += `\n`;
    });

    text += `\nüì± RUDN Schedule ‚Äì Telegram WebApp`;
    
    return text;
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
  const generateTelegramText = () => {
    const dateStr = formatDate(selectedDate);
    const dayName = selectedDate.toLocaleDateString('ru-RU', { weekday: 'long' });
    const formattedDayName = dayName.charAt(0).toUpperCase() + dayName.slice(1);
    
    const todaySchedule = schedule.filter(item => item.day === formattedDayName);

    if (todaySchedule.length === 0) {
      return `üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}*\n${groupName ? `–ì—Ä—É–ø–ø–∞: _${groupName}_\n` : ''}\n‚ú® –ü–∞—Ä –Ω–µ—Ç! –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å! üéâ`;
    }

    let text = `üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}*\n`;
    if (groupName) {
      text += `üë• –ì—Ä—É–ø–ø–∞: _${groupName}_\n`;
    }
    text += `\n`;

    todaySchedule.forEach((classItem, index) => {
      text += `*${index + 1}. ${classItem.discipline}*\n`;
      text += `‚è∞ \`${classItem.time}\`\n`;
      if (classItem.auditory) {
        text += `üìç ${classItem.auditory}\n`;
      }
      if (classItem.teacher) {
        text += `üë®‚Äçüè´ ${classItem.teacher}\n`;
      }
      text += `\n`;
    });

    text += `üì± _RUDN Schedule ‚Äì Telegram WebApp_`;
    
    return text;
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const handleCopyToClipboard = async () => {
    try {
      const text = generateScheduleText();
      await navigator.clipboard.writeText(text);
      setCopied(true);
      if (hapticFeedback) hapticFeedback('notification', 'success');
      
      setTimeout(() => {
        setCopied(false);
      }, 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  // –®–∞—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram Web App API
  const handleShareToTelegram = async () => {
    if (hapticFeedback) hapticFeedback('impact', 'medium');
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    if (telegramId) {
      try {
        const result = await achievementsAPI.trackAction(telegramId, 'share_schedule', {
          source: 'share_modal',
          date: new Date().toISOString()
        });
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (result.new_achievements && result.new_achievements.length > 0) {
          console.log('New achievement earned:', result.new_achievements[0]);
        }
      } catch (error) {
        console.error('Failed to track share_schedule action:', error);
      }
    }
    
    const text = generateTelegramText();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Web App API
    if (window.Telegram?.WebApp) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram.WebApp.switchInlineQuery –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
      // –ò–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
      const encodedText = encodeURIComponent(text);
      const botUrl = `https://t.me/${botUsername}`;
      const url = `https://t.me/share/url?url=${botUrl}&text=${encodedText}`;
      window.open(url, '_blank');
    } else {
      // Fallback: –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
      handleCopyToClipboard();
    }
  };

  // –®–∞—Ä–∏–Ω–≥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (screenshot)
  const handleShareAsImage = () => {
    if (hapticFeedback) hapticFeedback('impact', 'medium');
    // TODO: Implement screenshot functionality
    alert('–§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üì∏');
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
  const handleInviteFriends = async () => {
    if (hapticFeedback) hapticFeedback('impact', 'medium');
    
    // –¢—Ä–µ–∫–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞
    if (telegramId) {
      try {
        await achievementsAPI.trackAction(telegramId, 'invite_friend', {
          source: 'share_modal',
          date: new Date().toISOString()
        });
      } catch (error) {
        console.error('Failed to track invite_friend action:', error);
      }
    }
    
    const inviteText = `üéì –ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é RUDN Schedule –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! üëá`;
    const encodedText = encodeURIComponent(inviteText);
    const botUrl = `https://t.me/${botUsername}`;
    const url = `https://t.me/share/url?url=${botUrl}&text=${encodedText}`;
    window.open(url, '_blank');
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-[150]"
          />

          {/* Modal Container - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */}
          <div className="fixed inset-0 z-[160] flex items-center justify-center p-4 sm:p-6 md:p-8">
            <motion.div
              initial={{ opacity: 0, scale: 0.95, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.95, y: 20 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className="w-full max-w-[95vw] sm:max-w-md md:max-w-lg lg:max-w-xl max-h-[90vh] overflow-y-auto"
            >
              <div className="bg-white rounded-2xl sm:rounded-3xl p-4 sm:p-6 md:p-8 shadow-2xl">
                {/* Header */}
                <div className="flex items-center justify-between mb-4 sm:mb-6">
                  <h2 className="text-lg sm:text-xl md:text-2xl font-bold text-gray-900 leading-tight pr-2">
                    –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                  </h2>
                  <button
                    onClick={() => {
                      if (hapticFeedback) hapticFeedback('impact', 'light');
                      onClose();
                    }}
                    className="w-8 h-8 sm:w-9 sm:h-9 flex-shrink-0 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 active:bg-gray-300 transition-colors"
                  >
                    <X className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600" />
                  </button>
                </div>

                {/* Info */}
                <div className="mb-4 sm:mb-6 p-3 sm:p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl sm:rounded-2xl">
                  <p className="text-xs sm:text-sm text-gray-600 text-center">
                    üìÖ {formatDate(selectedDate)}
                  </p>
                  {groupName && (
                    <p className="text-xs text-gray-500 text-center mt-1">
                      –ì—Ä—É–ø–ø–∞: {groupName}
                    </p>
                  )}
                </div>

                {/* Share Options */}
                <div className="space-y-2 sm:space-y-3">
                  {/* –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram */}
                  <motion.button
                    whileHover={{ scale: 1.01 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={handleShareToTelegram}
                    className="w-full flex items-center gap-2 sm:gap-3 md:gap-4 p-3 sm:p-4 rounded-lg sm:rounded-xl bg-gradient-to-r from-blue-500 to-cyan-500 text-white hover:shadow-lg active:shadow-md transition-shadow"
                  >
                    <div className="w-8 h-8 sm:w-10 sm:h-10 flex-shrink-0 flex items-center justify-center rounded-full bg-white/20">
                      <MessageCircle className="w-4 h-4 sm:w-5 sm:h-5" />
                    </div>
                    <div className="flex-1 text-left min-w-0">
                      <p className="font-semibold text-sm sm:text-base truncate">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç</p>
                      <p className="text-xs text-white/80 hidden sm:block">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram</p>
                    </div>
                    <Share2 className="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" />
                  </motion.button>

                  {/* –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç */}
                  <motion.button
                    whileHover={{ scale: 1.01 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={handleCopyToClipboard}
                    className="w-full flex items-center gap-2 sm:gap-3 md:gap-4 p-3 sm:p-4 rounded-lg sm:rounded-xl bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:shadow-lg active:shadow-md transition-shadow"
                  >
                    <div className="w-8 h-8 sm:w-10 sm:h-10 flex-shrink-0 flex items-center justify-center rounded-full bg-white/20">
                      {copied ? <Check className="w-4 h-4 sm:w-5 sm:h-5" /> : <Copy className="w-4 h-4 sm:w-5 sm:h-5" />}
                    </div>
                    <div className="flex-1 text-left min-w-0">
                      <p className="font-semibold text-sm sm:text-base truncate">
                        {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç'}
                      </p>
                      <p className="text-xs text-white/80 hidden sm:block">
                        {copied ? '–¢–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞' : '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'}
                      </p>
                    </div>
                  </motion.button>

                  {/* –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                  <motion.button
                    whileHover={{ scale: 1.01 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={handleShareAsImage}
                    className="w-full flex items-center gap-2 sm:gap-3 md:gap-4 p-3 sm:p-4 rounded-lg sm:rounded-xl bg-gradient-to-r from-green-500 to-teal-500 text-white hover:shadow-lg active:shadow-md transition-shadow"
                  >
                    <div className="w-8 h-8 sm:w-10 sm:h-10 flex-shrink-0 flex items-center justify-center rounded-full bg-white/20">
                      <ImageIcon className="w-4 h-4 sm:w-5 sm:h-5" />
                    </div>
                    <div className="flex-1 text-left min-w-0">
                      <p className="font-semibold text-sm sm:text-base truncate">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É</p>
                      <p className="text-xs text-white/80 hidden sm:block">–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</p>
                    </div>
                    <span className="text-xs bg-white/20 px-2 py-0.5 sm:py-1 rounded-full flex-shrink-0">–°–∫–æ—Ä–æ</span>
                  </motion.button>

                  {/* –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π */}
                  <motion.button
                    whileHover={{ scale: 1.01 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={handleInviteFriends}
                    className="w-full flex items-center gap-2 sm:gap-3 md:gap-4 p-3 sm:p-4 rounded-lg sm:rounded-xl bg-gray-100 hover:bg-gray-200 active:bg-gray-300 text-gray-700 transition-colors"
                  >
                    <div className="w-8 h-8 sm:w-10 sm:h-10 flex-shrink-0 flex items-center justify-center rounded-full bg-white">
                      <Share2 className="w-4 h-4 sm:w-5 sm:h-5" />
                    </div>
                    <div className="flex-1 text-left min-w-0">
                      <p className="font-semibold text-sm sm:text-base truncate">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π</p>
                      <p className="text-xs text-gray-500 hidden sm:block">–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</p>
                    </div>
                  </motion.button>
                </div>

                {/* Preview */}
                <div className="mt-4 sm:mt-6 p-3 sm:p-4 bg-gray-50 rounded-lg sm:rounded-xl max-h-32 sm:max-h-40 md:max-h-48 overflow-y-auto">
                  <p className="text-xs text-gray-500 mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</p>
                  <pre className="text-[10px] sm:text-xs text-gray-700 whitespace-pre-wrap font-mono leading-relaxed">
                    {generateScheduleText()}
                  </pre>
                </div>
              </div>
            </motion.div>
          </div>
        </>
      )}
    </AnimatePresence>
  );
};
