import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Share2, Copy, Check, MessageCircle, Image as ImageIcon, X } from 'lucide-react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
export const ShareScheduleModal = ({ 
  isOpen, 
  onClose, 
  schedule, 
  selectedDate,
  groupName,
  hapticFeedback 
}) => {
  const [copied, setCopied] = useState(false);

  if (!isOpen) return null;

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (date) => {
    return date.toLocaleDateString('ru-RU', { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long' 
    });
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const generateScheduleText = () => {
    const dateStr = formatDate(selectedDate);
    const dayName = selectedDate.toLocaleDateString('ru-RU', { weekday: 'long' });
    const formattedDayName = dayName.charAt(0).toUpperCase() + dayName.slice(1);
    
    const todaySchedule = schedule.filter(item => item.day === formattedDayName);

    if (todaySchedule.length === 0) {
      return `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}\n${groupName ? `–ì—Ä—É–ø–ø–∞: ${groupName}\n` : ''}\n‚ú® –ü–∞—Ä –Ω–µ—Ç! –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å! üéâ`;
    }

    let text = `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}\n`;
    if (groupName) {
      text += `üë• –ì—Ä—É–ø–ø–∞: ${groupName}\n`;
    }
    text += `\n`;

    todaySchedule.forEach((classItem, index) => {
      text += `${index + 1}. ${classItem.discipline}\n`;
      text += `   ‚è∞ ${classItem.time}\n`;
      if (classItem.auditory) {
        text += `   üìç ${classItem.auditory}\n`;
      }
      if (classItem.teacher) {
        text += `   üë®‚Äçüè´ ${classItem.teacher}\n`;
      }
      text += `\n`;
    });

    text += `\nüì± RUDN Schedule ‚Äì Telegram WebApp`;
    
    return text;
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
  const generateTelegramText = () => {
    const dateStr = formatDate(selectedDate);
    const dayName = selectedDate.toLocaleDateString('ru-RU', { weekday: 'long' });
    const formattedDayName = dayName.charAt(0).toUpperCase() + dayName.slice(1);
    
    const todaySchedule = schedule.filter(item => item.day === formattedDayName);

    if (todaySchedule.length === 0) {
      return `üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}*\n${groupName ? `–ì—Ä—É–ø–ø–∞: _${groupName}_\n` : ''}\n‚ú® –ü–∞—Ä –Ω–µ—Ç! –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å! üéâ`;
    }

    let text = `üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${dateStr}*\n`;
    if (groupName) {
      text += `üë• –ì—Ä—É–ø–ø–∞: _${groupName}_\n`;
    }
    text += `\n`;

    todaySchedule.forEach((classItem, index) => {
      text += `*${index + 1}. ${classItem.discipline}*\n`;
      text += `‚è∞ \`${classItem.time}\`\n`;
      if (classItem.auditory) {
        text += `üìç ${classItem.auditory}\n`;
      }
      if (classItem.teacher) {
        text += `üë®‚Äçüè´ ${classItem.teacher}\n`;
      }
      text += `\n`;
    });

    text += `üì± _RUDN Schedule ‚Äì Telegram WebApp_`;
    
    return text;
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const handleCopyToClipboard = async () => {
    try {
      const text = generateScheduleText();
      await navigator.clipboard.writeText(text);
      setCopied(true);
      if (hapticFeedback) hapticFeedback('notification', 'success');
      
      setTimeout(() => {
        setCopied(false);
      }, 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  // –®–∞—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram Web App API
  const handleShareToTelegram = () => {
    if (hapticFeedback) hapticFeedback('impact', 'medium');
    
    const text = generateTelegramText();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Web App API
    if (window.Telegram?.WebApp) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram.WebApp.switchInlineQuery –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
      // –ò–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
      const encodedText = encodeURIComponent(text);
      const url = `https://t.me/share/url?url=${encodedText}`;
      window.open(url, '_blank');
    } else {
      // Fallback: –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
      handleCopyToClipboard();
    }
  };

  // –®–∞—Ä–∏–Ω–≥ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (screenshot)
  const handleShareAsImage = () => {
    if (hapticFeedback) hapticFeedback('impact', 'medium');
    // TODO: Implement screenshot functionality
    alert('–§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üì∏');
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
  const handleInviteFriends = () => {
    if (hapticFeedback) hapticFeedback('impact', 'medium');
    
    const inviteText = `üéì –ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é RUDN Schedule –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! üëá\n\nüì± RUDN Schedule ‚Äì Telegram WebApp`;
    const encodedText = encodeURIComponent(inviteText);
    const url = `https://t.me/share/url?url=${encodedText}`;
    window.open(url, '_blank');
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="fixed inset-0 bg-black/60 backdrop-blur-sm z-[150]"
          />

          {/* Modal */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            className="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-[160] w-[90%] max-w-md"
          >
            <div className="bg-white rounded-3xl p-6 shadow-2xl">
              {/* Header */}
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">
                  –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                </h2>
                <button
                  onClick={() => {
                    if (hapticFeedback) hapticFeedback('impact', 'light');
                    onClose();
                  }}
                  className="w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
                >
                  <X className="w-5 h-5 text-gray-600" />
                </button>
              </div>

              {/* Info */}
              <div className="mb-6 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl">
                <p className="text-sm text-gray-600 text-center">
                  üìÖ {formatDate(selectedDate)}
                </p>
                {groupName && (
                  <p className="text-xs text-gray-500 text-center mt-1">
                    –ì—Ä—É–ø–ø–∞: {groupName}
                  </p>
                )}
              </div>

              {/* Share Options */}
              <div className="space-y-3">
                {/* –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram */}
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleShareToTelegram}
                  className="w-full flex items-center gap-4 p-4 rounded-xl bg-gradient-to-r from-blue-500 to-cyan-500 text-white hover:shadow-lg transition-shadow"
                >
                  <div className="w-10 h-10 flex items-center justify-center rounded-full bg-white/20">
                    <MessageCircle className="w-5 h-5" />
                  </div>
                  <div className="flex-1 text-left">
                    <p className="font-semibold">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç</p>
                    <p className="text-xs text-white/80">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram</p>
                  </div>
                  <Share2 className="w-5 h-5" />
                </motion.button>

                {/* –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç */}
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleCopyToClipboard}
                  className="w-full flex items-center gap-4 p-4 rounded-xl bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:shadow-lg transition-shadow"
                >
                  <div className="w-10 h-10 flex items-center justify-center rounded-full bg-white/20">
                    {copied ? <Check className="w-5 h-5" /> : <Copy className="w-5 h-5" />}
                  </div>
                  <div className="flex-1 text-left">
                    <p className="font-semibold">
                      {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç'}
                    </p>
                    <p className="text-xs text-white/80">
                      {copied ? '–¢–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞' : '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'}
                    </p>
                  </div>
                </motion.button>

                {/* –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleShareAsImage}
                  className="w-full flex items-center gap-4 p-4 rounded-xl bg-gradient-to-r from-green-500 to-teal-500 text-white hover:shadow-lg transition-shadow"
                >
                  <div className="w-10 h-10 flex items-center justify-center rounded-full bg-white/20">
                    <ImageIcon className="w-5 h-5" />
                  </div>
                  <div className="flex-1 text-left">
                    <p className="font-semibold">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É</p>
                    <p className="text-xs text-white/80">–°–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</p>
                  </div>
                  <span className="text-xs bg-white/20 px-2 py-1 rounded-full">–°–∫–æ—Ä–æ</span>
                </motion.button>

                {/* –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π */}
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleInviteFriends}
                  className="w-full flex items-center gap-4 p-4 rounded-xl bg-gray-100 hover:bg-gray-200 text-gray-700 transition-colors"
                >
                  <div className="w-10 h-10 flex items-center justify-center rounded-full bg-white">
                    <Share2 className="w-5 h-5" />
                  </div>
                  <div className="flex-1 text-left">
                    <p className="font-semibold">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π</p>
                    <p className="text-xs text-gray-500">–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</p>
                  </div>
                </motion.button>
              </div>

              {/* Preview */}
              <div className="mt-6 p-4 bg-gray-50 rounded-xl max-h-48 overflow-y-auto">
                <p className="text-xs text-gray-500 mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</p>
                <pre className="text-xs text-gray-700 whitespace-pre-wrap font-mono">
                  {generateScheduleText()}
                </pre>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};
